
LAB6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f2  00800100  000002cc  00000360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  008001f2  008001f2  00000452  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000954  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f3  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e7  00000000  00000000  0000155b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000406  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000132  00000000  00000000  00001e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3f       	cpi	r26, 0xF2	; 242
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 ef       	ldi	r26, 0xF2	; 242
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 3f       	cpi	r26, 0xF9	; 249
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  9e:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
}

void initUART9600(void)
{
	//Paso 1: RX y TX como salida
	DDRD &= ~(1<<DDD0);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
	
	//Paso 2:Configurar UCSR0A
	UCSR0A = 0;
  b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: configurar UCSR0B donde se habilita ISR de recepcion y se habilita RX y TX
	UCSR0B = 0;
  b6:	e1 ec       	ldi	r30, 0xC1	; 193
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
  bc:	80 81       	ld	r24, Z
  be:	88 69       	ori	r24, 0x98	; 152
  c0:	80 83       	st	Z, r24
	
	//Paso 4: Configurar UCSR0C, asincrono, paridad: none, 1 bit stop, data bits de 8 bits
	UCSR0C = 0;
  c2:	e2 ec       	ldi	r30, 0xC2	; 194
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
  c8:	80 81       	ld	r24, Z
  ca:	86 60       	ori	r24, 0x06	; 6
  cc:	80 83       	st	Z, r24
	
	//Paso 5: COnfigurar velocidad de baudrate a 9600
	UBRR0 = 103;
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  da:	08 95       	ret

000000dc <initADC>:
	
}


void initADC(){
	ADMUX = 6;
  dc:	ec e7       	ldi	r30, 0x7C	; 124
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);  //Referencia AVCC = 5V
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1); //Justificación a la izquierda
  ea:	80 81       	ld	r24, Z
  ec:	8f 77       	andi	r24, 0x7F	; 127
  ee:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR);
  f0:	80 81       	ld	r24, Z
  f2:	80 62       	ori	r24, 0x20	; 32
  f4:	80 83       	st	Z, r24
	ADCSRA = 0;
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADIE);  //Habilitando interrupcion de ADC
  fc:	80 81       	ld	r24, Z
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);  //Habilitando prescaler de 16M/128 frecuencia = 125Khz
 102:	80 81       	ld	r24, Z
 104:	87 60       	ori	r24, 0x07	; 7
 106:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN);   //Habilitando el ADC
 108:	80 81       	ld	r24, Z
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret

00000110 <__vector_21>:




ISR(ADC_vect)
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	dato = ADCH;   //Contador general
 120:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 124:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <dato>
	ADCSRA |= (1<<ADIF); //Se borra la bandera de interrupción
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 61       	ori	r24, 0x10	; 16
 130:	80 83       	st	Z, r24
}
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <writeUART>:


//Funcion de escritura de un caracter
void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
 142:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 146:	95 ff       	sbrs	r25, 5
 148:	fc cf       	rjmp	.-8      	; 0x142 <writeUART>
		UDR0 = Caracter;
 14a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 14e:	08 95       	ret

00000150 <writeTextUART>:
		
}

 //Función de escritura de una cadena de caracteres
void writeTextUART(char * Texto){
 150:	ac 01       	movw	r20, r24
	uint8_t o;
	for(o = 0; Texto[o]!= '\0'; o++){
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	07 c0       	rjmp	.+14     	; 0x164 <writeTextUART+0x14>
		while(!(UCSR0A & (1<<UDRE0)));
 156:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 15a:	95 ff       	sbrs	r25, 5
 15c:	fc cf       	rjmp	.-8      	; 0x156 <writeTextUART+0x6>
			UDR0 = Texto[o];
 15e:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

 //Función de escritura de una cadena de caracteres
void writeTextUART(char * Texto){
	uint8_t o;
	for(o = 0; Texto[o]!= '\0'; o++){
 162:	2f 5f       	subi	r18, 0xFF	; 255
 164:	fa 01       	movw	r30, r20
 166:	e2 0f       	add	r30, r18
 168:	f1 1d       	adc	r31, r1
 16a:	30 81       	ld	r19, Z
 16c:	31 11       	cpse	r19, r1
 16e:	f3 cf       	rjmp	.-26     	; 0x156 <writeTextUART+0x6>
		while(!(UCSR0A & (1<<UDRE0)));
			UDR0 = Texto[o];
	}
}
 170:	08 95       	ret

00000172 <main>:
volatile char receivedChar = 0;


int main(void)
{
	DDRB = 0b00111111;  //Salida hacia LEDs  PB0 a PB5
 172:	8f e3       	ldi	r24, 0x3F	; 63
 174:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0b11000000; // Configura PD6 y PD7 como salidas 
 176:	8a b1       	in	r24, 0x0a	; 10
 178:	80 6c       	ori	r24, 0xC0	; 192
 17a:	8a b9       	out	0x0a, r24	; 10
		
	initADC();
 17c:	0e 94 6e 00 	call	0xdc	; 0xdc <initADC>
	initUART9600();
 180:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	
	sei(); //Activar interrupciones
 184:	78 94       	sei
	
	
	while (1)
	{
	//************MENU*********************************
	if(activa == 0){
 186:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <activa>
 18a:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <activa+0x1>
 18e:	89 2b       	or	r24, r25
 190:	39 f5       	brne	.+78     	; 0x1e0 <main+0x6e>
	writeTextUART("\n\r**************Hola como esta****************");   //Mostrar inicio 
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 a8 00 	call	0x150	; 0x150 <writeTextUART>
	writeUART(10);
 19a:	8a e0       	ldi	r24, 0x0A	; 10
 19c:	0e 94 a1 00 	call	0x142	; 0x142 <writeUART>
	writeUART(13);
 1a0:	8d e0       	ldi	r24, 0x0D	; 13
 1a2:	0e 94 a1 00 	call	0x142	; 0x142 <writeUART>
	writeUART(10);
 1a6:	8a e0       	ldi	r24, 0x0A	; 10
 1a8:	0e 94 a1 00 	call	0x142	; 0x142 <writeUART>
	writeTextUART("          Coloque 1 para leer potenciometro");   //Mostrar inicio
 1ac:	8f e2       	ldi	r24, 0x2F	; 47
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0e 94 a8 00 	call	0x150	; 0x150 <writeTextUART>
	writeUART(10);
 1b4:	8a e0       	ldi	r24, 0x0A	; 10
 1b6:	0e 94 a1 00 	call	0x142	; 0x142 <writeUART>
	writeUART(13);
 1ba:	8d e0       	ldi	r24, 0x0D	; 13
 1bc:	0e 94 a1 00 	call	0x142	; 0x142 <writeUART>
	writeTextUART("          Coloque 2 para enviar ASCII\n\r");   //Mostrar inicio
 1c0:	8b e5       	ldi	r24, 0x5B	; 91
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 a8 00 	call	0x150	; 0x150 <writeTextUART>
	writeUART(10);
 1c8:	8a e0       	ldi	r24, 0x0A	; 10
 1ca:	0e 94 a1 00 	call	0x142	; 0x142 <writeUART>
	writeUART(13);
 1ce:	8d e0       	ldi	r24, 0x0D	; 13
 1d0:	0e 94 a1 00 	call	0x142	; 0x142 <writeUART>
	activa = 1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <activa+0x1>
 1dc:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <activa>
	}
	
	if(receivedChar != 0){
 1e0:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <__data_end>
 1e4:	88 23       	and	r24, r24
 1e6:	79 f2       	breq	.-98     	; 0x186 <main+0x14>
		switch(receivedChar)
 1e8:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <__data_end>
 1ec:	81 33       	cpi	r24, 0x31	; 49
 1ee:	19 f0       	breq	.+6      	; 0x1f6 <main+0x84>
 1f0:	82 33       	cpi	r24, 0x32	; 50
 1f2:	e9 f0       	breq	.+58     	; 0x22e <main+0xbc>
 1f4:	c8 cf       	rjmp	.-112    	; 0x186 <main+0x14>
		{
			case '1':
			writeTextUART("\n\r------------------------------------------\n\r");
 1f6:	83 e8       	ldi	r24, 0x83	; 131
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 a8 00 	call	0x150	; 0x150 <writeTextUART>
			writeTextUART("Lectura actual de potenciometro es:");
 1fe:	82 eb       	ldi	r24, 0xB2	; 178
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0e 94 a8 00 	call	0x150	; 0x150 <writeTextUART>
			ADCSRA |= (1 << ADSC);   //Leer puerto de ADC
 206:	ea e7       	ldi	r30, 0x7A	; 122
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	80 64       	ori	r24, 0x40	; 64
 20e:	80 83       	st	Z, r24
			writeTextUART("255\n\r");
 210:	86 ed       	ldi	r24, 0xD6	; 214
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 a8 00 	call	0x150	; 0x150 <writeTextUART>
			writeTextUART("------------------------------------------\n\r");
 218:	85 e8       	ldi	r24, 0x85	; 133
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 a8 00 	call	0x150	; 0x150 <writeTextUART>
			activa = 0;
 220:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <activa+0x1>
 224:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <activa>
			receivedChar = 0;
 228:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <__data_end>
			break;
 22c:	ac cf       	rjmp	.-168    	; 0x186 <main+0x14>
			
			case '2':
			receivedChar = 0;
 22e:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <__data_end>
			writeTextUART("\n\rIngrese un valor\n\r");
 232:	8c ed       	ldi	r24, 0xDC	; 220
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 a8 00 	call	0x150	; 0x150 <writeTextUART>
			activa2 = 1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <activa2+0x1>
 242:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <activa2>
			break;
 246:	9f cf       	rjmp	.-194    	; 0x186 <main+0x14>

00000248 <__vector_18>:
			UDR0 = Texto[o];
	}
}

ISR(USART_RX_vect)
{
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	2f 93       	push	r18
 254:	3f 93       	push	r19
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
	receivedChar = UDR0; // Almacena el carácter recibido
 25a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 25e:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <__data_end>
	
	if (activa2 == 1){
 262:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <activa2>
 266:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <activa2+0x1>
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	e1 f4       	brne	.+56     	; 0x2a6 <__vector_18+0x5e>
		// Dividir el carácter recibido en dos partes
		uint8_t lower_bits = receivedChar & 0b00111111; // Los 6 bits menos significativos
 26e:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <__data_end>
 272:	2f 73       	andi	r18, 0x3F	; 63
		uint8_t upper_bits = (receivedChar >> 6) & 0b11; // Los 2 bits más significativos
 274:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <__data_end>
 278:	98 2f       	mov	r25, r24
 27a:	92 95       	swap	r25
 27c:	96 95       	lsr	r25
 27e:	96 95       	lsr	r25
 280:	93 70       	andi	r25, 0x03	; 3

		// Mostrar los 6 bits menos significativos en PORTB
		PORTB = lower_bits;
 282:	25 b9       	out	0x05, r18	; 5

		// Mostrar los 2 bits más significativos en los pines PD6 y PD7 de PORTD
		PORTD = (PORTD & ~0b11000000) | (upper_bits << 6);
 284:	2b b1       	in	r18, 0x0b	; 11
 286:	30 e4       	ldi	r19, 0x40	; 64
 288:	93 9f       	mul	r25, r19
 28a:	c0 01       	movw	r24, r0
 28c:	11 24       	eor	r1, r1
 28e:	92 2f       	mov	r25, r18
 290:	9f 73       	andi	r25, 0x3F	; 63
 292:	89 2b       	or	r24, r25
 294:	8b b9       	out	0x0b, r24	; 11
		activa2 = 0;
 296:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <activa2+0x1>
 29a:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <activa2>
		activa = 0;
 29e:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <activa+0x1>
 2a2:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <activa>
	}
	
	while(!(UCSR0A & (1<<UDRE0)));    //Mientras haya caracteres
 2a6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2aa:	85 ff       	sbrs	r24, 5
 2ac:	fc cf       	rjmp	.-8      	; 0x2a6 <__vector_18+0x5e>
		UDR0 = receivedChar;
 2ae:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <__data_end>
 2b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	

 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	3f 91       	pop	r19
 2bc:	2f 91       	pop	r18
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <_exit>:
 2c8:	f8 94       	cli

000002ca <__stop_program>:
 2ca:	ff cf       	rjmp	.-2      	; 0x2ca <__stop_program>
